/*
 * (C) Copyright 2017 Nuxeo SA (http://nuxeo.com/) and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *     bdelbosc
 */

package org.nuxeo.ecm.platform.importer.mqueues.producer;

import org.nuxeo.ecm.core.blob.BlobInfo;
import org.nuxeo.ecm.platform.importer.mqueues.message.DocumentMessage;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;


/**
 * Provide a blob reference for a message.
 * The blobs must be already imported in the binary store.
 *
 * @since 9.1
 */
public class RandomBlobInfoProvider implements AutoCloseable {
    private final Path basePath;
    private final List<Path> fileList;
    private File currentFile;
    private int currentFileIndex;
    private BufferedReader currentReader;
    private FileReader currentFileReader;

    /**
     * Use the path of CSV files generated by the BlobMessageConsumer
     *
     */
    public RandomBlobInfoProvider(Path blobInfoDirectory, int seed) {
        this.basePath = blobInfoDirectory;
        this.currentFileIndex = seed;
        this.fileList = listBlobInfoFiles();
        getNextBufferedReader();
    }

    private List<Path> listBlobInfoFiles() {
        final List<Path> ret;
        try (Stream<Path> paths = Files.walk(basePath)) {
            ret = paths.filter(path -> (Files.isRegularFile(path) && path.toString().endsWith("csv"))).collect(Collectors.toList());
            Collections.sort(ret, (p1, p2) -> p1.getFileName().compareTo(p2.getFileName()));
        } catch (IOException e) {
            throw new IllegalArgumentException("Invalid blobInfo directory: " + basePath, e);
        }
        if (ret.isEmpty()) {
            throw new IllegalArgumentException("Invalid blobInfo directory no csv file found: " + basePath);
        }
        return ret;
    }

    public BlobInfo getBlobInfo(DocumentMessage.Builder builder) {
        String line = getNextLine();
        String[] tokens = line.split(",");
        if (tokens.length < 6) {
            throw new IllegalArgumentException("Invalid csv file not enough field per line: " + currentFile + " " + line);
        }
        BlobInfo ret = new BlobInfo();
        ret.key = tokens[0].trim();
        ret.digest = tokens[1].trim();
        ret.length = Long.valueOf(tokens[2].trim());
        ret.filename = tokens[3].trim().replace("\"", "");
        ret.mimeType = tokens[4].trim();
        ret.encoding = tokens[5].trim();
        return ret;
    }

    private void getNextBufferedReader() {
        currentFile = fileList.get(currentFileIndex % fileList.size()).toFile();
        currentFileIndex += 1;
        try {
            currentFileReader = new FileReader(currentFile);
            currentReader = new BufferedReader(new FileReader(currentFile));
            // skip the header line
            currentReader.readLine();
        } catch (FileNotFoundException e) {
            throw new IllegalArgumentException("Invalid file: " + currentFile, e);
        } catch (IOException e) {
            throw new IllegalArgumentException("Can not read file: " + currentFile, e);
        }
    }

    private String getNextLine() {
        String ret;
        try {
            ret = currentReader.readLine();
            if (ret == null) {
                currentReader.close();
                currentFileReader.close();
                getNextBufferedReader();
                return getNextLine();
            }
        } catch (IOException e) {
            throw new IllegalArgumentException("Can not read file: " + currentFile, e);
        }
        return ret;
    }

    @Override
    public void close() throws Exception {
        if (currentReader != null) {
            currentReader.close();
        }
        if (currentFileReader != null) {
            currentFileReader.close();
        }
    }
}
